<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <android.support.v4.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/white"
        android:layout_weight="1">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="Sudoku"
                android:gravity="center"
                android:textSize="25dp" />

            <ImageView
                android:id="@+id/imageView"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                app:srcCompat="@drawable/sudoku_icon" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="10dp"
                android:text="The boards generated by this program all have a unique solution. The algorithm used for the generation of the boards is inspired by the paper [Sudoku Puzzles Generating: from Easy to Evil]. This flowchart visually explains the procedure." />

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="530dp"
                app:srcCompat="@drawable/sudoku_generation_flowchart" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="10dp"
                android:text="First, we start with a valid finished state game. The difficulty level determines the total minimum number of given entries, and the minimum number of given entries per row and column. We can then check if removing an entry will lead to a unique solution by testing all other 8 possibilities in that entry and attempting a solve with a recursive backtracking algorithm. If any of these solves are succesful, removing this entry would not lead to a unique solution. We then continue until no other entries can be removed." />


            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="TicTacToe"
                android:paddingTop="10dp"
                android:gravity="center"
                android:textSize="25dp" />

            <ImageView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:srcCompat="@drawable/tictactoe_icon" />

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="10dp"
                android:text="A basic artificial intelligence is implemented to play Sudoku against the user. It uses the minmax algorithm by traversing a game tree to determine which next move is the best." />


            <ImageView
                android:layout_width="match_parent"
                android:layout_height="410dp"
                app:srcCompat="@drawable/tictactoe_game_tree" />


            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="10dp"
                android:text="Each leaf has a score: +10 for a win, -10 for a loss and 0 for a tie. The score of the higher nodes is the sum of the score of the children. At each turn, the bot will play the move taking the game to the node with the highest score. This pattern makes a perfect and unbeatable opponent." />



        </LinearLayout>

    </android.support.v4.widget.NestedScrollView>

    <Button
        android:id="@+id/close_button"
        android:gravity="center"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_weight="0.001"
        android:text="Close" />


</LinearLayout>
